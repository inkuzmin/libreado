// Generated by CoffeeScript 1.7.1
(function() {
  var app, request, should, __altHostnames, __hostname;

  __hostname = "libreado.com";

  __altHostnames = ["libreado.ru", "libreado.net", "libreado.org", "libreado.info"];

  require("http").globalAgent.maxSockets = 1000;

  require("https").globalAgent.maxSockets = 1000;

  process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

  request = require("request");

  should = require("chai").should();

  app = require("../app");

  describe("Redirections", function() {
    describe("Open http://libreado.com:8080", function() {
      it("should return at 200 response code", function(done) {
        return request("http://" + __hostname + ":8080", function(err, res, body) {
          res.statusCode.should.equal(200);
          return done();
        });
      });
      it("should redirect to uri with security protocol", function(done) {
        return request("http://" + __hostname + ":8080", function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/^https:/);
          return done();
        });
      });
      it("and port", function(done) {
        return request("http://" + __hostname + ":8080", function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/:443\/$/);
          return done();
        });
      });
      return it("should redirect to www subdomain", function(done) {
        return request("http://" + __hostname + ":8080", function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/www/);
          return done();
        });
      });
    });
    describe("Open http://libreado.com:80", function() {
      it("should return at 200 response code", function(done) {
        return request("http://" + __hostname + ":80", function(err, res, body) {
          res.statusCode.should.equal(200);
          return done();
        });
      });
      it("should redirect to uri with security protocol", function(done) {
        return request("http://" + __hostname + ":80", function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/^https:/);
          return done();
        });
      });
      it("and port", function(done) {
        return request("http://" + __hostname + ":80", function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/:443\/$/);
          return done();
        });
      });
      return it("should redirect to www subdomain", function(done) {
        return request("http://" + __hostname + ":80", function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/www/);
          return done();
        });
      });
    });
    describe("Open http://libreado.com", function() {
      it("should return at 200 response code", function(done) {
        return request("http://" + __hostname, function(err, res, body) {
          res.statusCode.should.equal(200);
          return done();
        });
      });
      it("should redirect to uri with security protocol", function(done) {
        return request("http://" + __hostname, function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/^https:/);
          return done();
        });
      });
      it("should redirect to uri with security port", function(done) {
        return request("http://" + __hostname, function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/:443\/$/);
          return done();
        });
      });
      return it("should redirect to www subdomain", function(done) {
        return request("http://" + __hostname, function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/www/);
          return done();
        });
      });
    });
    describe("Open http://test.libreado.com", function() {
      it("should return 200 as response code", function(done) {
        return request("http://test." + __hostname, function(err, res, body) {
          res.statusCode.should.equal(200);
          return done();
        });
      });
      it("should redirect to uri with security protocol", function(done) {
        return request("http://test." + __hostname, function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/^https:/);
          return done();
        });
      });
      it("should redirect to uri with security port", function(done) {
        return request("http://test." + __hostname, function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/:443\/$/);
          return done();
        });
      });
      return it("should redirect to www subdomain", function(done) {
        return request("http://test." + __hostname, function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/www/);
          return done();
        });
      });
    });
    describe("Open http://www.libreado.com", function() {
      it("should return 200 as response code", function(done) {
        return request("http://www." + __hostname, function(err, res, body) {
          res.statusCode.should.equal(200);
          return done();
        });
      });
      it("should redirect to uri with security protocol", function(done) {
        return request("http://www." + __hostname, function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/^https:/);
          return done();
        });
      });
      it("should redirect to uri with security port", function(done) {
        return request("http://www." + __hostname, function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/:443\/$/);
          return done();
        });
      });
      return it("should save www as subdomain", function(done) {
        return request("http://www." + __hostname, function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/www/);
          return done();
        });
      });
    });
    describe("Open http://api.libreado.com", function() {
      it("should return 200 as response code", function(done) {
        return request("http://api." + __hostname, function(err, res, body) {
          res.statusCode.should.equal(200);
          return done();
        });
      });
      it("should redirect to uri with security protocol", function(done) {
        return request("http://api." + __hostname, function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/^https:/);
          return done();
        });
      });
      it("should redirect to uri with security port", function(done) {
        return request("http://api." + __hostname, function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/:443\/$/);
          return done();
        });
      });
      it("should not contain www as subdomain", function(done) {
        return request("http://api." + __hostname, function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.not.match(/www/);
          return done();
        });
      });
      return it("should contain api as subdomain", function(done) {
        return request("http://api." + __hostname, function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/api/);
          return done();
        });
      });
    });
    describe("Open http://app.libreado.com", function() {
      it("should return 200 as response code", function(done) {
        return request("http://app." + __hostname, function(err, res, body) {
          res.statusCode.should.equal(200);
          return done();
        });
      });
      it("should redirect to uri with security protocol", function(done) {
        return request("http://app." + __hostname, function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/^https:/);
          return done();
        });
      });
      it("should redirect to uri with security port", function(done) {
        return request("http://app." + __hostname, function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/:443\/$/);
          return done();
        });
      });
      it("should not contain www as subdomain", function(done) {
        return request("http://app." + __hostname, function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.not.match(/www/);
          return done();
        });
      });
      return it("should contain api as subdomain", function(done) {
        return request("http://app." + __hostname, function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/app/);
          return done();
        });
      });
    });
    return describe("Open http://libreado.ru", function() {
      it("should return 200 as response code", function(done) {
        return request("http://" + __altHostnames[0], function(err, res, body) {
          res.statusCode.should.equal(200);
          return done();
        });
      });
      it("should redirect to uri with security protocol", function(done) {
        return request("http://" + __altHostnames[0], function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/^https:/);
          return done();
        });
      });
      it("should redirect to uri with security port", function(done) {
        return request("http://" + __altHostnames[0], function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/:443\/$/);
          return done();
        });
      });
      return it("should not contain www as subdomain", function(done) {
        return request("http://" + __altHostnames[0], function(err, res, body) {
          var reqUri;
          reqUri = res.request.uri.href;
          reqUri.should.match(/www/);
          return done();
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=redirections.map
